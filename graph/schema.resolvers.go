package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"Graphql/cons"
	"Graphql/graph/model"
	"Graphql/graph/model/meetup"
	"Graphql/graph/model/user"
	"context"
	"errors"
	"fmt"
)

// User is the resolver for the user field.
func (r *meetupResolver) User(ctx context.Context, obj *meetup.Meetup) (*user.User, error) {
	user := new(user.User)

	for _, u := range cons.Users {
		if u.ID == obj.UserID {
			user = u
			break
		}
	}

	if user == nil {
		return nil, errors.New("user with id not exist")
	}

	return user, nil
}

// CreateMeetup is the resolver for the createMeetup field.
func (r *mutationResolver) CreateMeetup(ctx context.Context, input model.NewMeetup) (*meetup.Meetup, error) {
	panic(fmt.Errorf("not implemented: CreateMeetup - createMeetup"))
}

// Meetups is the resolver for the meetups field.
func (r *queryResolver) Meetups(ctx context.Context) ([]*meetup.Meetup, error) {
	return cons.Meetups, nil
}

// Meetups is the resolver for the meetups field.
func (r *userResolver) Meetups(ctx context.Context, obj *user.User) ([]*meetup.Meetup, error) {
	var m []*meetup.Meetup

	for _, meet := range cons.Meetups {
		if meet.UserID == obj.ID {
			m = append(m, meet)
		}
	}

	return m, nil
}

// Meetup returns MeetupResolver implementation.
func (r *Resolver) Meetup() MeetupResolver { return &meetupResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type meetupResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
